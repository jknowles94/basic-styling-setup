//Triangle
@mixin triangle($direction, $size: 6px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

// Rem

@function parseInt($n) { 
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : (); 
  $rem: (); 

  @each $value in $values { 

      @if $value == 0 or $value == auto { 
          $px : append($px , $value);
          $rem: append($rem, $value);
      } @else { 
          $unit: unit($value);   
          $val: parseInt($value); 

          @if $unit == "px" {  
              $px : append($px,  $value);
              $rem: append($rem, ($val / 10 + rem));
          }

          @if $unit == "rem" { 
              $px : append($px,  ($val * 10 + px));
              $rem: append($rem, $value);
          }
      }
  }

  @if $px == $rem {     
      #{$property}: $px;  
  } @else {
      #{$property}: $px;  
      #{$property}: $rem;
  }
}

//Margin/padding
@each $spacer in map-keys($spacers) {
  .m-#{$spacer} {margin: #{map-get($spacers, $spacer)}}
  .p-#{$spacer} {padding: #{map-get($spacers, $spacer)}}
  .mb-#{$spacer} {margin-bottom: #{map-get($spacers, $spacer)}}
  .pb-#{$spacer} {padding-bottom: #{map-get($spacers, $spacer)}}
  .mt-#{$spacer} {margin-top: #{map-get($spacers, $spacer)}}
  .pt-#{$spacer} {padding-top: #{map-get($spacers, $spacer)}}
  .ml-#{$spacer} {margin-left: #{map-get($spacers, $spacer)}}
  .pl-#{$spacer} {padding-left: #{map-get($spacers, $spacer)}}
  .mr-#{$spacer} {margin-right: #{map-get($spacers, $spacer)}}
  .pr-#{$spacer} {padding-right: #{map-get($spacers, $spacer)}}
  .mx-#{$spacer} {margin: 0 #{map-get($spacers, $spacer)}}
  .px-#{$spacer} {padding: 0 #{map-get($spacers, $spacer)}}
  .my-#{$spacer} {margin: #{map-get($spacers, $spacer)} 0}
  .py-#{$spacer} {padding: #{map-get($spacers, $spacer)} 0}
}

// flex
$flexes: () !default;
$flexes: map-merge(
  (
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
  ),
  $flexes
);
.flex {
  flex: 1 1 0%;
}
@each $key, $n in $flexes {
  .flex-#{$key} {
      flex: $n $n 0%;
  }
}

.flex-row            { flex-direction: row !important; }
.flex-column         { flex-direction: column !important; }
.flex-row-reverse    { flex-direction: row-reverse !important; }
.flex-column-reverse { flex-direction: column-reverse !important; }

.flex-wrap         { flex-wrap: wrap !important; }
.flex-nowrap       { flex-wrap: nowrap !important; }
.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

.justify-content-start   { justify-content: flex-start !important; }
.justify-content-end     { justify-content: flex-end !important; }
.justify-content-center  { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around  { justify-content: space-around !important; }

.align-items-start    { align-items: flex-start !important; }
.align-items-end      { align-items: flex-end !important; }
.align-items-center   { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch  { align-items: stretch !important; }

.align-content-start   { align-content: flex-start !important; }
.align-content-end     { align-content: flex-end !important; }
.align-content-center  { align-content: center !important; }
.align-content-between { align-content: space-between !important; }
.align-content-around  { align-content: space-around !important; }
.align-content-stretch { align-content: stretch !important; }

.align-self-auto     { align-self: auto !important; }
.align-self-start    { align-self: flex-start !important; }
.align-self-end      { align-self: flex-end !important; }
.align-self-center   { align-self: center !important; }
.align-self-baseline { align-self: baseline !important; }
.align-self-stretch  { align-self: stretch !important; }

// Display

.d-none         { display: none !important; }
.d-inline       { display: inline !important; }
.d-inline-block { display: inline-block !important; }
.d-block        { display: block !important; }
.d-table        { display: table !important; }
.d-table-row    { display: table-row !important; }
.d-table-cell   { display: table-cell !important; }
.d-flex         { display: flex !important; }
.d-inline-flex  { display: inline-flex !important; }

//
// Text
//

// Alignment

.text-justify  { text-align: justify !important; }
.text-nowrap   { white-space: nowrap !important; }

.text-left   { text-align: left !important; }
.text-right  { text-align: right !important; }
.text-center { text-align: center !important; }


// Transformation

.text-lowercase  { text-transform: lowercase !important; }
.text-uppercase  { text-transform: uppercase !important; }
.text-capitalize { text-transform: capitalize !important; }

// Weight and italics

.font-weight-light  { font-weight: $font-weight-light !important; }
.font-weight-normal { font-weight: $font-weight-normal !important; }
.font-weight-bold   { font-weight: $font-weight-bold !important; }
.font-italic        { font-style: italic !important; }

// Contextual colors

.text-white { color: #fff !important; }

.align-baseline    { vertical-align: baseline !important; } // Browser default
.align-top         { vertical-align: top !important; }
.align-middle      { vertical-align: middle !important; }
.align-bottom      { vertical-align: bottom !important; }
.align-text-bottom { vertical-align: text-bottom !important; }
.align-text-top    { vertical-align: text-top !important; }

.text-ellipse {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}
.line-height-1 {
  line-height: 1;
}
.position-sticky-top {
  position: sticky;
  top: 0;
  z-index: 1;
}

.visible-xs,
.visible-xs-block {
  display: none !important;
  @media (max-width: map-get($grid-breakpoints, 'md')) {
    display: block !important;;
  }
}
.visible-xs-flex {
  display: none !important;
  @media (max-width: map-get($grid-breakpoints, 'md')) {
    display: flex !important;;
  }
}
.hidden-xs {
  @media (max-width: map-get($grid-breakpoints, 'md')) {
    display: none !important;
  }
}
